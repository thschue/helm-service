// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/keptn/keptn/helm-service/pkg/types (interfaces: IChartPackager)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chart "helm.sh/helm/v3/pkg/chart"
)

// MockIChartPackager is a mock of IChartPackager interface.
type MockIChartPackager struct {
	ctrl     *gomock.Controller
	recorder *MockIChartPackagerMockRecorder
}

// MockIChartPackagerMockRecorder is the mock recorder for MockIChartPackager.
type MockIChartPackagerMockRecorder struct {
	mock *MockIChartPackager
}

// NewMockIChartPackager creates a new mock instance.
func NewMockIChartPackager(ctrl *gomock.Controller) *MockIChartPackager {
	mock := &MockIChartPackager{ctrl: ctrl}
	mock.recorder = &MockIChartPackagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChartPackager) EXPECT() *MockIChartPackagerMockRecorder {
	return m.recorder
}

// Package mocks base method.
func (m *MockIChartPackager) Package(arg0 *chart.Chart) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Package", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Package indicates an expected call of Package.
func (mr *MockIChartPackagerMockRecorder) Package(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Package", reflect.TypeOf((*MockIChartPackager)(nil).Package), arg0)
}
