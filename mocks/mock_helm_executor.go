// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/keptn/keptn/helm-service/pkg/helm (interfaces: HelmExecutor)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	chart "helm.sh/helm/v3/pkg/chart"
)

// MockHelmExecutor is a mock of HelmExecutor interface.
type MockHelmExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockHelmExecutorMockRecorder
}

// MockHelmExecutorMockRecorder is the mock recorder for MockHelmExecutor.
type MockHelmExecutorMockRecorder struct {
	mock *MockHelmExecutor
}

// NewMockHelmExecutor creates a new mock instance.
func NewMockHelmExecutor(ctrl *gomock.Controller) *MockHelmExecutor {
	mock := &MockHelmExecutor{ctrl: ctrl}
	mock.recorder = &MockHelmExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmExecutor) EXPECT() *MockHelmExecutorMockRecorder {
	return m.recorder
}

// GetManifest mocks base method.
func (m *MockHelmExecutor) GetManifest(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifest", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifest indicates an expected call of GetManifest.
func (mr *MockHelmExecutorMockRecorder) GetManifest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockHelmExecutor)(nil).GetManifest), arg0, arg1)
}

// UninstallRelease mocks base method.
func (m *MockHelmExecutor) UninstallRelease(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallRelease", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallRelease indicates an expected call of UninstallRelease.
func (mr *MockHelmExecutorMockRecorder) UninstallRelease(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallRelease", reflect.TypeOf((*MockHelmExecutor)(nil).UninstallRelease), arg0, arg1)
}

// UpgradeChart mocks base method.
func (m *MockHelmExecutor) UpgradeChart(arg0 *chart.Chart, arg1, arg2 string, arg3 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeChart", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeChart indicates an expected call of UpgradeChart.
func (mr *MockHelmExecutorMockRecorder) UpgradeChart(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeChart", reflect.TypeOf((*MockHelmExecutor)(nil).UpgradeChart), arg0, arg1, arg2, arg3)
}
